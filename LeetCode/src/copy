#include <iostream>
#include<cstdlib>
#include<fstream>
#include<vector>
#include <sstream>
#include<cstring>

using namespace std;

//int profit[10010][10000] = {-1};

class Solution {
public:

	int maxProfit(int k, int prices[] , int n) {
        return maxProfitUtil(k , prices , n);
    }

    int maxProfitUtil(int k, int prices[] , int n){
    	if(profit[n][k] > 0)
    		return profit[n][k];

    	int maxprofit = 0;
        if( n <= 0 || k <= 0)
            maxprofit =  0;
        else if(k > n-1)
        	maxprofit = allProfit(prices , n);
        else if(k == 1)
            maxprofit = maxProfitfor1(prices , n);
        else{
			for(int st = 1 ; st < n -1  ; st++){
				for(int i = 0 ; i <= k ; i++){
					int profit1 = maxProfitUtil( k - i , prices , n - st);
					int profit2 = maxProfitUtil( i , prices + n - st  , n - (n - st));

					if(maxprofit < profit1 + profit2)
						maxprofit = profit1 + profit2;
				}
			}
        }

        profit[n][k] = maxprofit;
        return maxprofit;

    }

    int maxProfitfor1(int prices[] , int n) {
        if(n == 0)
            return 0;
        int low = prices[0];
        int maxprofit = 0;
        for(int i = 1 ; i < n ; i++){
            low = std::min(low , prices[i]);
            maxprofit = std::max(maxprofit , prices[i] - low);

        }
        return maxprofit;
    }

    int allProfit(int prices[] , int n){
		int tot = 0;
		for(int i = 1; i < n; ++i){
			tot += max(0, prices[i] - prices[i-1]);
		}
		return tot;
   }


    int allProfit(vector<int> prices){
            int tot = 0;
            for(int i = 1; i < prices.size(); ++i){
                tot += max(0, prices[i] - prices[i-1]);
            }
            return tot;
    }

    int maxProfit(int k, vector<int> &prices) {
		int n = prices.size();
		if(k * 2 >= n) return allProfit(prices);

		vector<int> mem((n + 1) * 2, 0);
		int *pref = &mem[0], *curf = &mem[n+1], g, *a = &prices[0] - 1;
		for(int i = 1; i <= k; ++i){

			curf[1] = 0;                  //g[1] = 0, g[2] = pref[0] - a[1]
			curf[2] = max(0, a[2] - a[1]);  g = -a[1];

			for(int j = 3; j <= n; ++j){
				g = max(g, pref[j-2] - a[j-1]);
				curf[j] = max(max(pref[j], curf[j-1]), g + a[j]);
			}
			swap(pref, curf);
		}
		return pref[n];
	}

};


int main(){
	int test,element;
	ifstream infile("ipLeetCode");
	if(infile)
//		cout<<"success";
	infile>>test;
	while(test--){

		int k  ;
		infile>>k;
		vector<int> prices;

		//to read newline
		char ch;
		infile>>ch;

		std::string input_str;

		std::getline( infile, input_str );

		std::stringstream ss(input_str);

		int i;

		while (ss >> i)
		{
		  prices.push_back(i);
		  if (ss.peek() == ',')
		    ss.ignore();
		 }

		int arr[prices.size()];
		i = 0;
		for(i = 0 ; i < prices.size() ; i++){
			arr[i] = prices[i];
		}
		cout<<"total elements "<<i<<endl;
		/*for(int i = 0 ; i < size ; i++){
			infile>>element;
			arr[i] = element;
			prices[i] = element;
		}*/
		Solution s;
		memset(profit , -1 , sizeof(profit));
		cout<<s.maxProfit(k , prices)<<endl;
		cout<<s.maxProfit(k , arr , prices.size())<<endl;

	}
	return 0;
}
